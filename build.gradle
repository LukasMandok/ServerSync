import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

plugins {
    id 'edu.sc.seis.launch4j' version '2.5.4'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

repositories {
    mavenCentral()
}


group = "com.superzanti.serversync"
version = ss_version

java {
    sourceCompatibility = 9
    targetCompatibility = 16
}

javafx {
    version = "17"
    modules = [ 'javafx.controls' ]
}

configurations {
    shadow
    compile.extendsFrom shadow
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2', 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2', 'com.eclipsesource.minimal-json:minimal-json:0.9.5'

    implementation fileTree(dir: 'libs', include: '*.jar')

    annotationProcessor 'info.picocli:picocli-codegen:4.6.2'

    shadow group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
    shadow group: 'info.picocli', name: 'picocli', version: '4.6.2'
}

application {
    mainClass = ss_main_class
    mainClassName = ss_main_class
}

test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

jar {
    processResources {
        exclude "css/application.css"
    }

    manifest {
        attributes 'Main-Class': ss_main_class, 'Implementation-Version': ss_version
    }
}

shadowJar {
    inputs.file(jar.archiveFile)
    configurations = [project.configurations.shadow]
    minimize()

    dependencies {
        exclude 'forge*.jar'
    }
}

createExe {
    jarTask = shadowJar
    mainClassName = ss_main_class
    outfile = 'ServerSyncClient.exe'
    icon = "${projectDir}/src/main/resources/ServersyncLogo.ico"
    copyConfigurable = shadowJar.outputs.files
    supportUrl = "https://github.com/superzanti/ServerSync"
    productName = "ServerSync - Client"
    fileDescription = "The client side for users."
    version = ss_version
}

task createServerExe(type: Launch4jLibraryTask) {
    jarTask = shadowJar
    mainClassName = ss_main_class_server
    outfile = 'ServerSyncServer.exe'
    headerType = 'console'
    icon = "${projectDir}/src/main/resources/ServersyncLogoServer.ico"
    copyConfigurable = shadowJar.outputs.files
    supportUrl = "https://github.com/superzanti/ServerSync"
    productName = "ServerSync - Server"
    fileDescription = "The server side for admins."
    version = ss_version
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv('GPR_REPO')}")
            credentials {
                username = project.findProperty("gpr.user") as String ?: System.getenv("GPR_USERNAME")
                password = project.findProperty("gpr.key") as String ?: System.getenv("GPR_TOKEN")
            }
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}

tasks.register('cleanProject') {
    def cleanupFiles = ["publish", "config", "logs", "mods", "clientmods"]

    for (name in cleanupFiles) {
        def f = file("$rootDir/$name")
        if (f.exists() && f.canWrite()) {
            f.deleteDir()
        }
    }
}
