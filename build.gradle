import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

plugins {
    id 'edu.sc.seis.launch4j' version '2.4.6'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'
    id 'application'
    id 'eclipse'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    jcenter()
}



group = "com.superzanti.serversync"
version = ssversion

configurations {
    shadow
    compile.extendsFrom shadow
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2', 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

    implementation fileTree(dir: 'libs', include: '*.jar')

    annotationProcessor 'info.picocli:picocli-codegen:4.3.2'

    shadow group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
    shadow group: 'info.picocli', name: 'picocli', version: '4.3.2'
}

application {
    mainClassName = 'com.superzanti.serversync.ServerSync'
}

test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

jar {
    archivesBaseName = ssname

    processResources {
        exclude "css/application.css"
    }

    manifest {
        attributes 'Main-Class': mainclass, 'Implementation-Version': ssversion
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    archivesBaseName = ssname
    minimize()

    dependencies {
        exclude 'forge*.jar'
    }
}

createExe {
    dependsOn shadowJar
    outfile = 'ServerSyncClient.exe'
    icon = "${projectDir}/src/main/resources/ServersyncLogo.ico"
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    supportUrl = "https://github.com/superzanti/ServerSync"
    productName = "ServerSync - Client"
    fileDescription = "The client side for users."
    version = ssversion
}

task createServerExe(type: Launch4jLibraryTask) {
    dependsOn shadowJar
    outfile = 'ServerSyncServer.exe'
    headerType = 'console'
    mainClassName = 'com.superzanti.serversync.ServerSyncServer'
    icon = "${projectDir}/src/main/resources/ServersyncLogoServer.ico"
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    supportUrl = "https://github.com/superzanti/ServerSync"
    productName = "ServerSync - Server"
    fileDescription = "The server side for admins."
    version = ssversion
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv('GPR_REPO')}")
            credentials {
                username = project.findProperty("gpr.user") as String ?: System.getenv("GPR_USERNAME")
                password = project.findProperty("gpr.key") as String ?: System.getenv("GPR_TOKEN")
            }
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}

clean {
}

task cleanProject {
    def cleanupFiles = ["publish", "config", "logs", "mods", "clientmods"]

    for (name in cleanupFiles) {
        def f = file("$rootDir/$name")
        if (f.exists() && f.canWrite()) {
            f.deleteDir()
        }
    }
}